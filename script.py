from pyrevit import DB, revitfrom pyrevit import forms, scriptfrom pyrevit.coreutils import appdatafrom System import Urifrom System.Windows.Media.Imaging import BitmapImageimport osimport sysdoc = revit.docvw = doc.ActiveViewlandscape = Trueif vw.CropBoxActive:    xyzMin = vw.CropBox.Min    xyzMax = vw.CropBox.Max    if xyzMax.X - xyzMin.X < xyzMax.Y - xyzMin.Y:        landscape = False    #print("View {} Width: {} Height {}".format(vw.Name, xyzMax.X - xyzMin.X, xyzMax.Y - xyzMin.Y))try:    errorReport = None    with revit.Transaction("View to image"):        options = DB.ImageExportOptions()        tmp_file = "C:/Temp/" + "Image_" + vw.Name        tmp_file = script.get_instance_data_file("Image_" + vw.Name, "jpg")        tmp_file = tmp_file[:-3] + "jpg"        #options.ShadowViewsFileType = "PNG",        #options.HLRandWFViewsFileType = DB.ImageFileType.PNG,        if options.IsValidFileName(tmp_file):            options.FilePath = tmp_file        else:            import time            options.FilePath = script.get_universal_data_file("Image_" + time.strftime("%Y%m%d-%H%M%S"), "jpg")        if vw.CropBoxActive:            options.ExportRange = DB.ExportRange.CurrentView #API seems to prohibit saving list of views to project as images        else:            options.ExportRange = DB.ExportRange.VisibleRegionOfCurrentView        options.ImageResolution = DB.ImageResolution.DPI_150        options.ZoomType = DB.ZoomFitType.FitToPage        if landscape:            options.FitDirection = DB.FitDirectionType.Vertical        else:            options.FitDirection = DB.FitDirectionType.Horizontal        options.PixelSize = 512        result = doc.ExportImage(options)        #Transaction endexcept:    # if error occurs anywhere in the process catch it    import traceback    errorReport = traceback.format_exc()if None != errorReport:    print(errorReport)

class ControlNetManagerWindow(forms.WPFWindow):    def __init__(self, xaml_file_name, reset_config=False):        forms.WPFWindow.__init__(self, xaml_file_name)        uri = Uri(tmp_file)        self.img.Source = BitmapImage(uri)        def ok_button(self, sender, args):        self.Close()    def window_closing(self, sender, args):        passtry:    ControlNetManagerWindow(xaml_file_name='ControlNetWindow.xaml').show_dialog()except Exception as kmex:    print(str(kmex))#os.remove(tmp_file)#print(list_data_files("jpg"))appdata.cleanup_appdata_folder()